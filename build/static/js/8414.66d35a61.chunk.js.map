{"version":3,"file":"static/js/8414.66d35a61.chunk.js","mappings":"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","sources":["components/DAudioChapter.js","functions/azureUpload.js","functions/imageUtils.js","subcomponents/SubmitButton.js","subcomponents/SuccessDialog.js","subcomponents/UploadButton.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Swal from 'sweetalert2'; // Importing sweetalert2\r\nimport { auth } from \"../firebase\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\nimport {\r\n  TextField,\r\n  Typography,\r\n  Box,\r\n\r\n  Chip,\r\n} from \"@mui/material\";\r\nimport SuccessDialog from '../subcomponents/SuccessDialog';\r\nimport uploadToAzure from '../functions/azureUpload';\r\nimport { resizeImage } from '../functions/imageUtils';\r\nimport UploadButton from '../subcomponents/UploadButton';\r\nimport SubmitButton from '../subcomponents/SubmitButton';\r\nfunction DAudioChapter() {\r\n  const LottieAnimation = React.lazy(() => import('lottie-react'));\r\n\r\n  const [file, setFile] = useState(null);\r\n  const [coverPreviewUrl, setCoverPreviewUrl] = useState(\"\");\r\n  const [monetization, setMonetization] = useState('free');\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [selectedCoverFileName, setSelectedCoverFileName] = useState(\"\");\r\n  const [selectedFileName, setSelectedFileName] = useState(\"\");\r\n  const [isSuccessDialogOpen, setIsSuccessDialogOpen] = useState(false);\r\n  const [imagePreviewUrl, setImagePreviewUrl] = useState(\"\");\r\n  const [showSuccessDialog, setShowSuccessDialog] = useState(false);\r\n  const [successDialogPoints, setSuccessDialogPoints] = useState(0);\r\n  const [successDialogMessage, setSuccessDialogMessage] = useState('');\r\n  const [audioDetails, setAudioDetails] = useState({\r\n    duration: 0, // initial state for audio duration\r\n    url: \"\", // this will hold the audio file URL after uploading\r\n  });\r\n  const [coverImage, setCoverImage] = useState(null); // State for the original cover image\r\nconst [thumbnail, setThumbnail] = useState(null);\r\n  const [chapterDetails, setChapterDetails] = useState({\r\n    title: '',\r\n    description: '',\r\n    content: '',\r\n    coverimage: '', // Consider this as a URL after uploading\r\n    type: \"Audio\",\r\n    author_platform_id:'',\r\n    categories: [],\r\n    genres: [],\r\n    // ... more fields as needed\r\n  });\r\n\r\n  const resetForm = () => {\r\n    setFile(null);\r\n    setMonetization('free');\r\n    setSelectedCoverFileName(\"\");\r\n    setSelectedFileName(\"\");\r\n    setChapterDetails({\r\n      title: '',\r\n      description: '',\r\n      content: '',\r\n      coverimage: '',\r\n      type: \"Audio\",\r\n      author_platform_id:'',\r\n      categories: [],\r\n      genres: [],\r\n      // Reset other fields if necessary\r\n    });\r\n     setCoverPreviewUrl(\"\");\r\n  };\r\n\r\n  const firebaseId = auth.currentUser.uid;\r\n\r\n  useEffect(() => {\r\n    const handlePageUnload = () => {\r\n      if (isSuccessDialogOpen) {\r\n        setShowSuccessDialog(false);\r\n      }\r\n    };\r\n\r\n    // Register the event listener\r\n    window.addEventListener('beforeunload', handlePageUnload);\r\n\r\n    // Cleanup function to remove the event listener\r\n    return () => {\r\n      window.removeEventListener('beforeunload', handlePageUnload);\r\n    };\r\n  }, [isSuccessDialogOpen]);\r\n\r\n  const availableCategories = [\r\n    \"Fiction\", \"Nonfiction\", \"Science Fiction\", \"Romance\",\r\n    \"Mystery/Thriller\", \"Fantasy\", \"Biography\", \"History\",\r\n    \"Business/Economics\", \"Self-help\", \"Health/Fitness\",\r\n    \"Cooking/Food\", \"Travel\", \"Technology\"\r\n  ];\r\n\r\n  const maxDescriptionLength = 500;\r\n  const minTitleLength = 3; // Minimum length for title\r\nconst maxTitleLength = 100; // Maximum length for title\r\nconst maxAudioFileSizeMB = 150;\r\nconst minCategoriesRequired = 1;\r\n\r\n  const handleAudioFileChange = (event) => {\r\n    const audioFile = event.target.files[0];\r\n    if (audioFile) {\r\n      setFile(audioFile);\r\n      setSelectedFileName(audioFile.name); // This correctly sets the selected file name for the audio file\r\n  \r\n      // To get the audio duration\r\n      const audio = new Audio(URL.createObjectURL(audioFile));\r\n      audio.onloadedmetadata = function() {\r\n        setAudioDetails({ ...audioDetails, duration: audio.duration });\r\n      };\r\n    }\r\n  };\r\n\r\n  // Image size validation\r\n  const isFileSizeValid = (file) => {\r\n    const maxSizeInMB = 5; // 5MB limit\r\n    const sizeInMB = file.size / 1024 / 1024;\r\n    return sizeInMB <= maxSizeInMB;\r\n  };\r\n\r\n  // Image dimensions validation\r\n  const isImageDimensionsValid = (file) => {\r\n    return new Promise((resolve) => {\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        resolve(img.width === 512 && img.height === 800);\r\n      };\r\n      img.src = URL.createObjectURL(file);\r\n    });\r\n  };\r\n\r\n  // Modified handleCoverImageChange to include thumbnail creation\r\n  const handleCoverImageChange = async (event) => {\r\n    const imageFile = event.target.files[0];\r\n    if (imageFile) {\r\n      if (!isFileSizeValid(imageFile)) {\r\n        Swal.fire('Error', 'Image size should not exceed 5MB.', 'error');\r\n        return;\r\n      }\r\n\r\n      const dimensionsValid = await isImageDimensionsValid(imageFile);\r\n      if (!dimensionsValid) {\r\n        Swal.fire('Error', 'Image dimensions should be exactly 512x800 pixels.', 'error');\r\n        return;\r\n      }\r\n\r\n\r\n      setCoverImage(imageFile); // Set the original cover image in state\r\n\r\n      // Generate and set the thumbnail\r\n      const thumbnailBlob = await resizeImage(imageFile, 256);\r\n      setThumbnail(thumbnailBlob);\r\n      setSelectedCoverFileName(imageFile.name);\r\n      setCoverPreviewUrl(URL.createObjectURL(imageFile));\r\n  \r\n      // Update chapterDetails with the local URL of the image for preview\r\n      setChapterDetails({ ...chapterDetails, coverimage: URL.createObjectURL(imageFile) });\r\n    }\r\n  };\r\n\r\n \r\n  const isAudioFileSizeValid = (file) => {\r\n    return file && file.size <= maxAudioFileSizeMB * 1024 * 1024;\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault()\r\n    try {\r\n   \r\n\r\n     // Check if the files are selected\r\n  if (!file || !coverImage) {\r\n    Swal.fire({\r\n      icon: 'error',\r\n      title: 'Missing Files',\r\n      text: 'Please ensure all required files are selected.',\r\n    });\r\n    return;\r\n  }\r\n\r\n\r\n        setShowSuccessDialog(true);\r\n        setSuccessDialogPoints(5); // Set points as per your logic\r\n        setSuccessDialogMessage('Well done! You\\'re a real YeePlatform author.');\r\n\r\n      // Check for cover image\r\nif (!chapterDetails.coverimage) {\r\n  Swal.fire({\r\n      icon: 'error',\r\n      title: 'Oops...',\r\n      text: 'Please provide a cover image.',\r\n  });\r\n  return;\r\n}\r\n\r\nif (chapterDetails.title.length < minTitleLength || chapterDetails.title.length > maxTitleLength) {\r\n  Swal.fire('Error', `Title should be between ${minTitleLength} and ${maxTitleLength} characters.`, 'error');\r\n  return;\r\n}\r\n\r\nif (!isAudioFileSizeValid(file)) {\r\n  Swal.fire('Error', `Audio file size should not exceed ${maxAudioFileSizeMB}MB.`, 'error');\r\n  return;\r\n}\r\n\r\nif (chapterDetails.categories.length < minCategoriesRequired) {\r\n  Swal.fire('Error', `Please select at least ${minCategoriesRequired} category(ies).`, 'error');\r\n  return;\r\n}\r\n\r\n        Swal.fire({\r\n            title: 'Uploading...',\r\n            text: 'Please wait while your chapter is being uploaded.',\r\n            showConfirmButton: false,\r\n            allowOutsideClick: false,\r\n            onBeforeOpen: () => {\r\n                Swal.showLoading();\r\n            }\r\n        });\r\n\r\n        // 1. Upload the cover image to Azure Blob Storage\r\n        const coverImageURL = await uploadToAzure(chapterDetails.coverimage);\r\n\r\n        const thumbnailURL = await uploadToAzure(chapterDetails.coverimage, true);\r\n\r\n        const updatedChapterDetails = {\r\n          ...chapterDetails,\r\n          coverimage: coverImageURL, // Set the cover image URL\r\n          thumbnailURL: thumbnailURL // If you're using a thumbnail\r\n        };\r\n\r\n        // 2. Upload the audio file to Azure Blob Storage\r\n        const blobURL = await uploadToAzure(file);\r\n\r\n        // 3. Save chapter details to the database\r\n        const user = auth.currentUser;\r\n        if (!user) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: 'No user logged in.',\r\n            });\r\n            return;\r\n        }\r\n\r\n        const response = await axios.post(`https://yeeplatformbackend.azurewebsites.net/AudioChapterupload/${user.uid}`, {\r\n            ...chapterDetails,\r\n            content: blobURL,\r\n            duration: audioDetails.duration,\r\n            author_platform_id: firebaseId,\r\n            coverimage: coverImageURL,  // Assign the URL to coverImage field\r\n            thumbnailUrl: thumbnailURL,\r\n        });\r\n\r\n           console.log('Attempting to close Swal and open dialog...');\r\n          Swal.close();\r\n        if (response.data && response.data.message) {\r\n     \r\n       \r\n          resetForm();\r\n          console.log('Form reset, attempting to open dialog...');\r\n          setIsSuccessDialogOpen(true);\r\n          console.log('Dialog should now be open:', dialogOpen);\r\n         \r\n            // Reset the form, or navigate to a success page, or show a success message\r\n        } else {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: 'Failed to save chapter details.',\r\n            });\r\n        }\r\n    } catch (error) {\r\n        Swal.fire({\r\n            icon: 'error',\r\n            title: 'Oops...',\r\n            text: 'Error during chapter upload.',\r\n        });\r\n    }\r\n};\r\n\r\nconst handleCategoryChange = (event) => {\r\n  const {\r\n    target: { value },\r\n  } = event;\r\n  setChapterDetails({\r\n    ...chapterDetails,\r\n    categories: typeof value === 'string' ? value.split(',') : value,\r\n  });\r\n};\r\n\r\nconst handleCategoryDelete = (categoryToDelete) => () => {\r\n  setChapterDetails({\r\n    ...chapterDetails,\r\n    categories: chapterDetails.categories.filter((category) => category !== categoryToDelete),\r\n  });\r\n};\r\n\r\nconst renderSelectedCategories = () => {\r\n  return chapterDetails.categories.map((category) => (\r\n    <Chip\r\n      key={category}\r\n      label={category}\r\n      onDelete={handleCategoryDelete(category)}\r\n      className=\"m-1\"\r\n    />\r\n  ));\r\n};\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"p-8 bg-white shadow-md rounded-lg max-w-md mx-auto\">\r\n    <Typography variant=\"h4\" gutterBottom>Upload Audio Chapter</Typography>\r\n\r\n\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"mb-4\">\r\n      <UploadButton\r\n        label=\"Upload Cover Image:\"\r\n        onChange={handleCoverImageChange}\r\n        fileName={selectedCoverFileName}\r\n        accept=\"image/*\"\r\n        required\r\n      />\r\n\r\n         {coverPreviewUrl && (\r\n              <Box\r\n                component=\"img\"\r\n                src={coverPreviewUrl}\r\n                alt=\"Cover Preview\"\r\n                sx={{ width: '100%', height: 'auto', maxWidth: '200px', marginTop: '10px' }} // Adjust image size\r\n              />\r\n            )}\r\n      </div>\r\n\r\n\r\n\r\n     \r\n\r\n<div className=\"mb-4\">\r\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\">Title:</label>\r\n          <TextField fullWidth variant=\"outlined\"\r\n           type=\"text\"\r\n           placeholder=\"Title\"\r\n          value={chapterDetails.title}\r\n          onChange={(e) => setChapterDetails({ ...chapterDetails, title: e.target.value })}\r\n          required />\r\n        </div>\r\n\r\n     \r\n        <div className=\"mb-4\">\r\n  <label className=\"block text-gray-700 text-sm font-bold mb-2\">\r\n    Categories:\r\n  </label>\r\n  <Autocomplete\r\n    multiple\r\n    id=\"tags-outlined\"\r\n    options={availableCategories}\r\n    getOptionLabel={(option) => option}\r\n    filterSelectedOptions\r\n    value={chapterDetails.categories}\r\n    onChange={(event, newValue) => {\r\n      setChapterDetails({ ...chapterDetails, categories: newValue });\r\n    }}\r\n    renderInput={(params) => (\r\n      <TextField\r\n        {...params}\r\n        variant=\"outlined\"\r\n        label=\"Select Categories\"\r\n        placeholder=\"Categories\"\r\n      />\r\n    )}\r\n  />\r\n</div>\r\n\r\n\r\n<div className=\"mb-4\">\r\n  <label className=\"block text-gray-700 text-sm font-bold mb-2\">Monetization:</label>\r\n  <select\r\n    value={monetization}\r\n    onChange={(e) => setMonetization(e.target.value)}\r\n    className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n  >\r\n    <option value=\"free\">Free</option>\r\n    <option value=\"notfree\">Not Free</option>\r\n  </select>\r\n</div>\r\n\r\n  \r\n    \r\n<div className=\"mb-4\">\r\n  <label className=\"block text-gray-700 text-sm font-bold mb-2\">Description:</label>\r\n  <TextField\r\n    fullWidth\r\n    multiline\r\n    rows={4}\r\n    variant=\"outlined\"\r\n    value={chapterDetails.description}\r\n    onChange={(e) => {\r\n      if (e.target.value.length <= maxDescriptionLength) {\r\n        setChapterDetails({ ...chapterDetails, description: e.target.value });\r\n      }\r\n    }}\r\n    helperText={`${chapterDetails.description.length}/${maxDescriptionLength}`}\r\n    required\r\n  />\r\n</div>\r\n\r\n\r\n        <div className=\"mb-4\">\r\n        <UploadButton\r\n        label=\"Upload Audio File:\"\r\n        onChange={handleAudioFileChange}\r\n        fileName={selectedFileName}\r\n        accept=\"audio/*\"\r\n        required\r\n      />\r\n\r\n      </div>\r\n\r\n\r\n\r\n      {isSuccessDialogOpen && (\r\n <SuccessDialog \r\n isOpen={showSuccessDialog}\r\n onClose={() => setShowSuccessDialog(false)}\r\n points={successDialogPoints}\r\n message={successDialogMessage}\r\n/>\r\n)}\r\n\r\n<SubmitButton buttonText=\"Upload Chapter\" />\r\n</form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DAudioChapter;\r\n","// azureUpload.js\r\n\r\nasync function uploadToAzure(file, isThumbnail = false) {\r\n    const response = await fetch('https://yeeplatformbackend.azurewebsites.net/generateSasToken');\r\n    const data = await response.json();\r\n    const sasToken = data.sasToken;\r\n\r\n    // Create a unique file name for the thumbnail to avoid name clashes\r\n    let fileName = isThumbnail ? `thumbnail-${Date.now()}.jpg` : file.name;\r\n    const blobURL = `https://yeeplatform.blob.core.windows.net/yeeebooks/${fileName}?${sasToken}`;\r\n\r\n    const requestOptions = {\r\n        method: 'PUT',\r\n        body: file,\r\n        headers: {\r\n            'x-ms-blob-type': 'BlockBlob'\r\n        }\r\n    };\r\n\r\n    const uploadResponse = await fetch(blobURL, requestOptions);\r\n\r\n    if (uploadResponse.ok) {\r\n        const publicBlobURL = blobURL.split('?')[0]; \r\n        return publicBlobURL;\r\n    } else {\r\n        throw new Error('Error uploading to Azure Blob Storage');\r\n    }\r\n}\r\n\r\nexport default uploadToAzure;\r\n","// imageUtils.js\r\nimport Pica from 'pica';\r\n\r\nconst pica = Pica();\r\n\r\nexport const resizeImage = (file, desiredWidth) => {\r\n    \r\n    return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n            const img = new Image();\r\n            img.onload = () => {\r\n                const scaleFactor = desiredWidth / img.width;\r\n                const desiredHeight = img.height * scaleFactor;\r\n\r\n                const canvas = document.createElement('canvas');\r\n                canvas.width = desiredWidth;\r\n                canvas.height = desiredHeight;\r\n\r\n                pica.resize(img, canvas)\r\n                    .then(result => pica.toBlob(result, 'image/jpeg', 0.80))\r\n                    .then(blob => resolve(blob))\r\n                    .catch(error => reject(error));\r\n            };\r\n            img.src = e.target.result;\r\n        };\r\n        reader.onerror = reject;\r\n        reader.readAsDataURL(file);\r\n    });\r\n};\r\n\r\nexport const isImageDimensionsValid = async (file, width, height) => {\r\n    return new Promise((resolve) => {\r\n        const img = new Image();\r\n        img.onload = () => {\r\n            resolve(img.width === width && img.height === height);\r\n        };\r\n        img.src = URL.createObjectURL(file);\r\n    });\r\n};\r\n\r\nexport const isFileSizeWithinRange = (file, minSizeInMB, maxSizeInMB) => {\r\n    const sizeInMB = file.size / (1024 * 1024);\r\n    return sizeInMB >= minSizeInMB && sizeInMB <= maxSizeInMB;\r\n};\r\n","import React from 'react';\r\n\r\nfunction SubmitButton({ buttonText }) {\r\n  return (\r\n    <button \r\n      type=\"submit\" \r\n      className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-lg transition duration-200 transform hover:scale-105 focus:outline-none focus:shadow-outline\"\r\n    >\r\n      {buttonText}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default SubmitButton;\r\n","import React from 'react';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Button from '@mui/material/Button';\r\nimport congs1Animation from '../animations/congs.json';\r\n\r\n\r\nfunction SuccessDialog({ isOpen, onClose, points, message }) {\r\n  const LottieAnimation = React.lazy(() => import('lottie-react'));\r\n\r\n  return (\r\n    <Dialog open={isOpen} onClose={onClose}>\r\n      <DialogTitle className=\"text-center\">Success!</DialogTitle>\r\n      <DialogContent className=\"flex flex-col items-center justify-center space-y-4\">\r\n        <React.Suspense fallback={<div>Loading...</div>}>\r\n          <LottieAnimation \r\n            animationData={congs1Animation}\r\n            style={{ width: 'auto', maxWidth: '100%', height: 200 }} \r\n          />\r\n        </React.Suspense>\r\n\r\n        <p>{message}</p>\r\n        <div className=\"text-center animate-pulse\">\r\n        <p className=\"text-yellow-500 font-bold text-xl\">You&apos;ve got</p>\r\n          <span className=\"text-4xl text-yellow-500\">{points} Points!</span>\r\n        </div>\r\n        <p>Your content will be available in the marketplace soon.</p>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={onClose} color=\"primary\">\r\n          Close\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default SuccessDialog;\r\n","import React from 'react';\r\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\r\n\r\nfunction UploadButton({ label, onChange, fileName, accept, required }) {\r\n  return (\r\n    <div>\r\n      {label && <label className=\"block text-gray-700 text-sm font-bold mb-2\">{label}</label>}\r\n      <label className={`w-full flex items-center px-4 py-2 rounded-lg shadow-lg tracking-wide uppercase border cursor-pointer hover:bg-yellow-500 hover:text-white ${fileName ? 'bg-yellow-500 text-white' : 'bg-white text-yellow-500 border-yellow-500'}`}>\r\n        <CloudUploadIcon className=\"mr-2\" />\r\n        {fileName || 'Choose File'}\r\n        <input\r\n          type=\"file\"\r\n          onChange={onChange}\r\n          className=\"hidden\"\r\n          accept={accept}\r\n          required={required}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UploadButton;\r\n"],"names":["file","setFile","useState","coverPreviewUrl","setCoverPreviewUrl","monetization","setMonetization","dialogOpen","setDialogOpen","selectedCoverFileName","setSelectedCoverFileName","selectedFileName","setSelectedFileName","isSuccessDialogOpen","setIsSuccessDialogOpen","imagePreviewUrl","setImagePreviewUrl","showSuccessDialog","setShowSuccessDialog","successDialogPoints","setSuccessDialogPoints","successDialogMessage","setSuccessDialogMessage","audioDetails","setAudioDetails","duration","url","coverImage","setCoverImage","thumbnail","setThumbnail","chapterDetails","setChapterDetails","title","description","content","coverimage","type","author_platform_id","categories","genres","firebaseId","auth","currentUser","uid","useEffect","handlePageUnload","window","addEventListener","removeEventListener","_jsxs","className","children","_jsx","Typography","variant","gutterBottom","onSubmit","async","event","preventDefault","Swal","icon","text","length","concat","size","maxAudioFileSizeMB","isAudioFileSizeValid","showConfirmButton","allowOutsideClick","onBeforeOpen","coverImageURL","uploadToAzure","thumbnailURL","blobURL","user","response","axios","post","thumbnailUrl","console","log","data","message","error","UploadButton","label","onChange","imageFile","target","files","isFileSizeValid","dimensionsValid","Promise","resolve","img","Image","onload","width","height","src","URL","createObjectURL","isImageDimensionsValid","thumbnailBlob","resizeImage","name","fileName","accept","required","Box","component","alt","sx","maxWidth","marginTop","TextField","fullWidth","placeholder","value","e","Autocomplete","multiple","id","options","getOptionLabel","option","filterSelectedOptions","newValue","renderInput","params","multiline","rows","helperText","audioFile","audio","Audio","onloadedmetadata","SuccessDialog","isOpen","onClose","points","SubmitButton","buttonText","isThumbnail","arguments","undefined","fetch","sasToken","json","Date","now","requestOptions","method","body","headers","ok","split","Error","pica","Pica","desiredWidth","reject","reader","FileReader","scaleFactor","desiredHeight","canvas","document","createElement","resize","then","result","toBlob","blob","catch","onerror","readAsDataURL","isFileSizeWithinRange","minSizeInMB","maxSizeInMB","sizeInMB","_ref","LottieAnimation","React","Dialog","open","DialogTitle","DialogContent","fallback","animationData","congs1Animation","style","DialogActions","Button","onClick","color","CloudUploadIcon"],"sourceRoot":""}