{"version":3,"file":"static/js/5016.b8cb2544.chunk.js","mappings":"iOAGO,MAAMA,GAAcC,EAAAA,EAAAA,iBAEpB,SAASC,IACd,OAAOC,EAAAA,WAAiBH,EAC1B,CAEO,SAASI,EAAYC,GAAgB,IAAf,SAAEC,GAAUD,EACvC,MAAOE,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,IAClCC,EAAMC,IAAWF,EAAAA,EAAAA,UAAS,OAC1BG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,IAChCK,EAAYC,IAAiBN,EAAAA,EAAAA,WAClC,IAAMO,KAAKC,MAAMC,aAAaC,QAAQ,iBAAkB,IAIpDC,GAAoBC,EAAAA,EAAAA,cAAYC,EAAAA,EAAAA,WAASC,UAC7C,GAAKC,GAAgBA,EAAYC,IAEjC,IACE,MAAMC,QAAiBC,MAAM,yDAADC,OAA0DJ,EAAYC,MAClG,GAAIC,EAASG,GAAI,CACf,MAAMC,QAAaJ,EAASK,OAC5BvB,EAAYsB,EAAKvB,SACnB,CAGF,CAAE,MAAOyB,GACP,IAED,MAAQ,IAELC,GAAQZ,EAAAA,EAAAA,cAAYE,MAAOW,EAAOC,KACtC,MAAM,KAAEC,EAAI,2BAAEC,SAAqC,kEACnD,IAAK,IAADC,EACF,MAAMC,QAAeF,EAA2BD,EAAMF,EAAOC,GAC7DxB,EAAQ4B,EAAO7B,MACf,MAAM8B,GAAsB,QAAXF,EAAAC,EAAO7B,YAAI,IAAA4B,OAAA,EAAXA,EAAaG,iBAAiB,EAC/C1B,EAAcyB,GACdtB,aAAawB,QAAQ,aAAcF,EAASG,WAC9C,CAAE,MAAOX,GACP,IAED,IAEGY,GAAkBvB,EAAAA,EAAAA,cAAYE,UAClC,MAAM,KAAEa,EAAI,gBAAES,EAAe,mBAAEC,SAA6B,kEACtDC,EAAW,IAAID,EAErB,IAAK,IAADE,EACF,MAAMT,QAAeM,EAAgBT,EAAMW,GAC3CpC,EAAQ4B,EAAO7B,MACf,MAAM8B,GAAsB,QAAXQ,EAAAT,EAAO7B,YAAI,IAAAsC,OAAA,EAAXA,EAAaP,iBAAiB,EAC/C1B,EAAcyB,GACdtB,aAAawB,QAAQ,aAAcF,EAASG,WAC9C,CAAE,MAAOX,GACP,IAED,IAEGiB,GAAS5B,EAAAA,EAAAA,cAAYE,UACzB,MAAM,KAAEa,EAAI,QAAEc,SAAkB,kEAChC,UACQA,EAAQd,GACdzB,EAAQ,MACRH,GAAY,EACd,CAAE,MAAOwB,GACP,IAED,KAGHmB,EAAAA,EAAAA,YAAU,KACe5B,WACrB,MAAM,KAAEa,EAAI,mBAAEgB,SAA6B,kEACrCC,EAAcD,EAAmBhB,GAAMb,UAC3CZ,EAAQa,GACRX,GAAW,GAEPW,IACFT,EAAcS,EAAYiB,eAC1BvB,aAAawB,QAAQ,aAAclB,EAAYiB,cAAcE,YAC/D,GAGwB,EAG5BW,EAAgB,GACf,KAGHH,EAAAA,EAAAA,YAAU,KACJzC,GACFU,EAAkBV,EACpB,GACC,CAACA,EAAMU,IAGV,MAAMmC,EAAe,CACnB7C,OACAH,WACAK,UACAE,aACAmB,QACAgB,SACAL,mBAGF,OACEY,EAAAA,EAAAA,KAACxD,EAAYyD,SAAQ,CAACC,MAAOH,EAAajD,SACvCA,GAGP,CAEA,S","sources":["contexts/AuthContext.js"],"sourcesContent":["import React, { useState, useEffect, createContext, useCallback } from \"react\";\r\nimport { debounce } from 'lodash'; \r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return React.useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [isAuthor, setIsAuthor] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isVerified, setIsVerified] = useState(\r\n    () => JSON.parse(localStorage.getItem('isVerified')) || false\r\n  );\r\n\r\n  // Memoized functions\r\n  const checkAuthorStatus = useCallback(debounce(async (currentUser) => {\r\n    if (!currentUser || !currentUser.uid) return;\r\n\r\n    try {\r\n      const response = await fetch(`https://yeeplatformbackend.azurewebsites.net/isAuthor/${currentUser.uid}`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setIsAuthor(data.isAuthor);\r\n      } else {\r\n        //console.error(\"AuthContext: Failed to check author status. Response status:\", response.status);\r\n      }\r\n    } catch (error) {\r\n      //console.error(\"AuthContext: Error checking author status:\", error);\r\n    }\r\n  }, 15000), []);\r\n\r\n  const login = useCallback(async (email, password) => {\r\n    const { auth, signInWithEmailAndPassword } = await import(\"../firebase\");\r\n    try {\r\n      const result = await signInWithEmailAndPassword(auth, email, password);\r\n      setUser(result.user);\r\n      const verified = result.user?.emailVerified || false;\r\n      setIsVerified(verified);\r\n      localStorage.setItem('isVerified', verified.toString());\r\n    } catch (error) {\r\n      //console.error(\"Error logging in:\", error);\r\n    }\r\n  }, []);\r\n\r\n  const loginWithGoogle = useCallback(async () => {\r\n    const { auth, signInWithPopup, GoogleAuthProvider } = await import(\"../firebase\");\r\n    const provider = new GoogleAuthProvider();\r\n\r\n    try {\r\n      const result = await signInWithPopup(auth, provider);\r\n      setUser(result.user);\r\n      const verified = result.user?.emailVerified || false;\r\n      setIsVerified(verified);\r\n      localStorage.setItem('isVerified', verified.toString());\r\n    } catch (error) {\r\n      //console.error(\"Error signing in with Google:\", error);\r\n    }\r\n  }, []);\r\n\r\n  const logout = useCallback(async () => {\r\n    const { auth, signOut } = await import(\"../firebase\");\r\n    try {\r\n      await signOut(auth);\r\n      setUser(null);\r\n      setIsAuthor(false);\r\n    } catch (error) {\r\n      //console.error(\"Error logging out:\", error);\r\n    }\r\n  }, []);\r\n\r\n  // Effect to manage authentication state\r\n  useEffect(() => {\r\n    const initializeAuth = async () => {\r\n      const { auth, onAuthStateChanged } = await import(\"../firebase\");\r\n      const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {\r\n        setUser(currentUser);\r\n        setLoading(false);\r\n\r\n        if (currentUser) {\r\n          setIsVerified(currentUser.emailVerified);\r\n          localStorage.setItem('isVerified', currentUser.emailVerified.toString());\r\n        }\r\n      });\r\n\r\n      return () => unsubscribe();\r\n    }\r\n\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  // Effect to check author status after initial render\r\n  useEffect(() => {\r\n    if (user) {\r\n      checkAuthorStatus(user);\r\n    }\r\n  }, [user, checkAuthorStatus]);\r\n\r\n  // Value provided by context\r\n  const contextValue = {\r\n    user,\r\n    isAuthor,\r\n    loading,\r\n    isVerified,\r\n    login,\r\n    logout,\r\n    loginWithGoogle\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport default AuthProvider;"],"names":["AuthContext","createContext","useAuth","React","AuthProvider","_ref","children","isAuthor","setIsAuthor","useState","user","setUser","loading","setLoading","isVerified","setIsVerified","JSON","parse","localStorage","getItem","checkAuthorStatus","useCallback","debounce","async","currentUser","uid","response","fetch","concat","ok","data","json","error","login","email","password","auth","signInWithEmailAndPassword","_result$user","result","verified","emailVerified","setItem","toString","loginWithGoogle","signInWithPopup","GoogleAuthProvider","provider","_result$user2","logout","signOut","useEffect","onAuthStateChanged","unsubscribe","initializeAuth","contextValue","_jsx","Provider","value"],"sourceRoot":""}