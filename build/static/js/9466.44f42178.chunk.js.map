{"version":3,"file":"static/js/9466.44f42178.chunk.js","mappings":"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","sources":["components/DWrite.js","functions/azureUpload.js","functions/imageUtils.js","subcomponents/SubmitButton.js","subcomponents/SuccessDialog.js","subcomponents/UploadButton.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Swal from \"sweetalert2\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { Typography } from \"@mui/material\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport UploadButton from '../subcomponents/UploadButton';  // Import UploadButton component\r\nimport SubmitButton from '../subcomponents/SubmitButton'; // Import SubmitButton component\r\nimport SuccessDialog from '../subcomponents/SuccessDialog';\r\nimport { resizeImage, isImageDimensionsValid, isFileSizeWithinRange } from '../functions/imageUtils';\r\nimport uploadToAzure from '../functions/azureUpload';\r\n\r\nconst DWrite = () => {\r\n  const LottieAnimation = React.lazy(() => import('lottie-react'));\r\n  const [isSuccessDialogOpen, setIsSuccessDialogOpen] = useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n    const handlePageUnload = () => {\r\n      if (isSuccessDialogOpen) {\r\n        setIsSuccessDialogOpen(false);\r\n      }\r\n    };\r\n\r\n    // Register the event listener\r\n    window.addEventListener('beforeunload', handlePageUnload);\r\n\r\n    // Cleanup function to remove the event listener\r\n    return () => {\r\n      window.removeEventListener('beforeunload', handlePageUnload);\r\n    };\r\n  }, [isSuccessDialogOpen]);\r\n\r\n    const [title, setTitle] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [content, setContent] = useState(\"\");\r\n    const [coverImage, setCoverImage] = useState(null);\r\n    const [selectedCoverFileName, setSelectedCoverFileName] = useState(\"\");\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [categories, setCategories] = useState([]);\r\n    const [coverPreviewUrl, setCoverPreviewUrl] = useState(\"\");\r\n\r\n    const [thumbnail, setThumbnail] = useState(null);\r\n    const resetForm = () => {\r\n        setTitle('');\r\n        setDescription('');\r\n        setContent('');\r\n        setCoverImage(null);\r\n        setSelectedCoverFileName('');\r\n        setCoverPreviewUrl('');\r\n        setCategories([]);\r\n    };\r\n\r\n    const availableCategories = [\r\n        \"Fiction\", \"Nonfiction\", \"Science Fiction\", \"Romance\",\r\n        \"Mystery/Thriller\", \"Fantasy\", \"Biography\", \"History\",\r\n        \"Business/Economics\", \"Self-help\", \"Health/Fitness\",\r\n        \"Cooking/Food\", \"Travel\", \"Technology\"\r\n      ];\r\n  \r\n      const maxTitleLength = 100; // Example limit for title\r\nconst minTitleLength = 5;   // Minimum length for title\r\nconst maxDescriptionLength = 500; // Already defined\r\nconst minDescriptionLength = 20;  // Example minimum for description\r\nconst maxContentLength = 10000;   // Example limit for chapter content\r\nconst minContentLength = 100;     // Minimum length for chapter content\r\nconst maxSizeInMB = 5;\r\n\r\nconst handleImageChange = async (e) => {\r\n  const file = e.target.files[0];\r\n  if (file) {\r\n      if (!isFileSizeWithinRange(file, 0.001, maxSizeInMB)) {\r\n          Swal.fire('Error', 'Image size should not exceed 5MB.', 'error');\r\n          return;\r\n      }\r\n\r\n      const isDimensionsValid = await isImageDimensionsValid(file, 512, 800);\r\n      if (!isDimensionsValid) {\r\n          Swal.fire('Error', 'Invalid image dimensions.', 'error');\r\n          return;\r\n      }\r\n\r\n      try {\r\n         \r\n          setCoverImage(file);\r\n          setSelectedCoverFileName(file.name);\r\n          setCoverPreviewUrl(URL.createObjectURL(file));\r\n      } catch (error) {\r\n          console.error('Error resizing image:', error);\r\n          Swal.fire('Error', 'Failed to resize the image.', 'error');\r\n      }\r\n  }\r\n};\r\n\r\n      // Image size validation\r\n  const isFileSizeValid = (file) => {\r\n    const maxSizeInMB = 5; // 5MB limit\r\n    const sizeInMB = file.size / 1024 / 1024;\r\n    return sizeInMB <= maxSizeInMB;\r\n  };\r\n\r\n  \r\n\r\n  // Image dimensions validation\r\n  const isImageDimensionsValid = (file) => {\r\n    return new Promise((resolve) => {\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        resolve(img.width === 512 && img.height === 800);\r\n      };\r\n      img.src = URL.createObjectURL(file);\r\n    });\r\n  };\r\n\r\n    const auth = getAuth();\r\n      const firebaseId = auth.currentUser?.uid;\r\n\r\n\r\n\r\n\r\n\r\nconst handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n    \r\n        if (title.length < minTitleLength || description.length < minDescriptionLength || content.length < minContentLength) {\r\n          Swal.fire(\"Error!\", \"Please ensure all fields meet the minimum length requirements.\", \"error\");\r\n          return;\r\n        }\r\n    \r\n        // Show loading progress dialog\r\n        Swal.fire({\r\n          title: 'Uploading...',\r\n          text: 'Please wait...',\r\n          allowEscapeKey: false,\r\n          allowOutsideClick: false,\r\n          showConfirmButton: false,\r\n          onBeforeOpen: () => {\r\n              Swal.showLoading();\r\n          }\r\n        });\r\n\r\n        let thumbnailUrl = ''; // Declare thumbnailUrl here\r\n        if (thumbnail) {\r\n            try {\r\n                const thumbnailBlob = await resizeImage(coverImage, 256); // Resize the image for thumbnail\r\n                thumbnailUrl = await uploadToAzure(thumbnailBlob, true); // Assign value to thumbnailUrl\r\n            } catch (error) {\r\n                console.error('Error resizing image:', error);\r\n                Swal.fire('Error', 'Failed to resize the image.', 'error');\r\n                return;\r\n            }\r\n        }\r\n    \r\n    \r\n        // Create FormData object\r\n        const formData = new FormData();\r\n        formData.append(\"title\", title);\r\n        formData.append(\"description\", description);\r\n        formData.append(\"content\", content);\r\n        formData.append(\"type\", \"Text\");\r\n        formData.append(\"author_platform_id\", firebaseId);\r\n        formData.append(\"categories\", categories.join(\", \"));\r\n        formData.append(\"thumbnailUrl\", thumbnailUrl);\r\n\r\n    \r\n        // Append cover image if available\r\n        if (coverImage) formData.append(\"coverimage\", coverImage);\r\n    \r\n        try {\r\n            const response = await fetch(`https://yeeplatformbackend.azurewebsites.net/uploadchapter/${firebaseId}`, {\r\n                method: \"POST\",\r\n                body: formData\r\n            });\r\n            const responseBody = await response.text();\r\n            console.log(\"Response Status:\", response.status);\r\n            console.log(\"Response Body:\", responseBody);\r\n    \r\n            // Close the loading dialog\r\n            Swal.close();\r\n    \r\n            // Check if response is OK and handle accordingly\r\n            if (!response.ok) throw new Error(\"Error uploading chapter\")\r\n            const data = JSON.parse(responseBody);   \r\n            setIsSuccessDialogOpen(true);\r\n            resetForm();\r\n    \r\n        } catch (error) {\r\n            // Handle any errors\r\n            Swal.close();\r\n            Swal.fire(\"Error!\", error.message, \"error\");\r\n        }\r\n    };\r\n    \r\n \r\n  \r\n\r\n  return (\r\n    <div className=\"p-8 bg-white shadow-md rounded-lg max-w-md mx-auto\">\r\n        <Typography variant=\"h4\" className=\"text-center mb-6\">Upload a Chapter</Typography>\r\n\r\n        <form onSubmit={handleSubmit}>\r\n            {/* Title Input */}\r\n            <div className=\"mb-4\">\r\n                <label htmlFor=\"title\" className=\"block text-gray-700 text-sm font-bold mb-2\">Title</label>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"title\"\r\n                    className=\"w-full p-2 border rounded\"\r\n                    value={title}\r\n                    onChange={(e) => setTitle(e.target.value)}\r\n                    required\r\n                />\r\n                <p className=\"text-right text-xs\">{title.length}/{maxTitleLength}</p>\r\n            </div>\r\n\r\n            {/* Description Input */}\r\n            <div className=\"mb-4\">\r\n                <label htmlFor=\"description\" className=\"block text-gray-700 text-sm font-bold mb-2\">Description</label>\r\n                <textarea\r\n                    id=\"description\"\r\n                    className=\"w-full p-2 border rounded\"\r\n                    value={description}\r\n                    onChange={(e) => setDescription(e.target.value)}\r\n                    required\r\n                />\r\n                <p className=\"text-right text-xs\">{description.length}/{maxDescriptionLength}</p>\r\n            </div>\r\n\r\n            {/* Category Selector */}\r\n            <div className=\"mb-4\">\r\n                <Autocomplete\r\n                    multiple\r\n                    options={availableCategories}\r\n                    getOptionLabel={(option) => option}\r\n                    filterSelectedOptions\r\n                    value={categories}\r\n                    onChange={(event, newValue) => setCategories(newValue)}\r\n                    renderInput={(params) => (\r\n                        <TextField {...params} variant=\"outlined\" label=\"Categories\" placeholder=\"Select Categories\" />\r\n                    )}\r\n                />\r\n            </div>\r\n\r\n            {/* Content Input */}\r\n            <div className=\"mb-4\">\r\n                <label htmlFor=\"content\" className=\"block text-gray-700 text-sm font-bold mb-2\">Content</label>\r\n                <textarea\r\n                    id=\"content\"\r\n                    rows=\"10\"\r\n                    className=\"w-full p-2 border rounded\"\r\n                    value={content}\r\n                    onChange={(e) => setContent(e.target.value)}\r\n                    required\r\n                />\r\n                <p className=\"text-right text-xs\">{content.length}/{maxContentLength}</p>\r\n            </div>\r\n\r\n            {/* Cover Image Upload */}\r\n            <div className=\"mb-4\">\r\n                <UploadButton\r\n                    onChange={handleImageChange}\r\n                    fileName={selectedCoverFileName}\r\n                    accept=\".jpg, .jpeg, .png\"\r\n                    label={`Upload Cover Image (Max size: ${maxSizeInMB}MB)`}\r\n                />\r\n                {coverPreviewUrl && (\r\n                    <img src={coverPreviewUrl} alt=\"Cover Preview\" className=\"mt-4 w-full h-auto\" />\r\n                )}\r\n            </div>\r\n\r\n            {/* Submit Button */}\r\n            <div className=\"flex justify-center\">\r\n                <SubmitButton buttonText=\"Upload\" />\r\n            </div>\r\n        </form>\r\n\r\n        {isSuccessDialogOpen && (\r\n            <SuccessDialog\r\n                isOpen={isSuccessDialogOpen}\r\n                onClose={() => setIsSuccessDialogOpen(false)}\r\n                points={5}\r\n                message=\"Well done! You're a real YeePlatform author.\"\r\n            />\r\n        )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DWrite;","// azureUpload.js\r\n\r\nasync function uploadToAzure(file, isThumbnail = false) {\r\n    const response = await fetch('https://yeeplatformbackend.azurewebsites.net/generateSasToken');\r\n    const data = await response.json();\r\n    const sasToken = data.sasToken;\r\n\r\n    // Create a unique file name for the thumbnail to avoid name clashes\r\n    let fileName = isThumbnail ? `thumbnail-${Date.now()}.jpg` : file.name;\r\n    const blobURL = `https://yeeplatform.blob.core.windows.net/yeeusers/${fileName}?${sasToken}`;\r\n\r\n    const requestOptions = {\r\n        method: 'PUT',\r\n        body: file,\r\n        headers: {\r\n            'x-ms-blob-type': 'BlockBlob'\r\n        }\r\n    };\r\n\r\n    const uploadResponse = await fetch(blobURL, requestOptions);\r\n\r\n    if (uploadResponse.ok) {\r\n        const publicBlobURL = blobURL.split('?')[0]; \r\n        return publicBlobURL;\r\n    } else {\r\n        throw new Error('Error uploading to Azure Blob Storage');\r\n    }\r\n}\r\n\r\nexport default uploadToAzure;\r\n","// imageUtils.js\r\nimport Pica from 'pica';\r\n\r\nconst pica = Pica();\r\n\r\nexport const resizeImage = (file, desiredWidth) => {\r\n    \r\n    return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n            const img = new Image();\r\n            img.onload = () => {\r\n                const scaleFactor = desiredWidth / img.width;\r\n                const desiredHeight = img.height * scaleFactor;\r\n\r\n                const canvas = document.createElement('canvas');\r\n                canvas.width = desiredWidth;\r\n                canvas.height = desiredHeight;\r\n\r\n                pica.resize(img, canvas)\r\n                    .then(result => pica.toBlob(result, 'image/jpeg', 0.80))\r\n                    .then(blob => resolve(blob))\r\n                    .catch(error => reject(error));\r\n            };\r\n            img.src = e.target.result;\r\n        };\r\n        reader.onerror = reject;\r\n        reader.readAsDataURL(file);\r\n    });\r\n};\r\n\r\nexport const isImageDimensionsValid = async (file, width, height) => {\r\n    return new Promise((resolve) => {\r\n        const img = new Image();\r\n        img.onload = () => {\r\n            resolve(img.width === width && img.height === height);\r\n        };\r\n        img.src = URL.createObjectURL(file);\r\n    });\r\n};\r\n\r\nexport const isFileSizeWithinRange = (file, minSizeInMB, maxSizeInMB) => {\r\n    const sizeInMB = file.size / (1024 * 1024);\r\n    return sizeInMB >= minSizeInMB && sizeInMB <= maxSizeInMB;\r\n};\r\n","import React from 'react';\r\n\r\nfunction SubmitButton({ buttonText }) {\r\n  return (\r\n    <button \r\n      type=\"submit\" \r\n      className=\"bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-lg transition duration-200 transform hover:scale-105 focus:outline-none focus:shadow-outline\"\r\n    >\r\n      {buttonText}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default SubmitButton;\r\n","import React from 'react';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Button from '@mui/material/Button';\r\nimport congs1Animation from '../animations/congs.json';\r\nimport Box from '@mui/material/Box';\r\n\r\n\r\nfunction SuccessDialog({ isOpen, onClose, points, message }) {\r\n  const LottieAnimation = React.lazy(() => import('lottie-react'));\r\n\r\n  return (\r\n    <Dialog open={isOpen} onClose={onClose}>\r\n      <DialogTitle className=\"text-center\">Success!</DialogTitle>\r\n      <DialogContent className=\"flex flex-col items-center justify-center space-y-4\">\r\n        <React.Suspense fallback={<div>Loading...</div>}>\r\n          <LottieAnimation \r\n            animationData={congs1Animation}\r\n            style={{ width: 'auto', maxWidth: '100%', height: 200 }} \r\n          />\r\n        </React.Suspense>\r\n\r\n        <p>{message}</p>\r\n        <div className=\"text-center animate-pulse\">\r\n        <p className=\"text-yellow-500 font-bold text-xl\">You&apos;ve got</p>\r\n          <span className=\"text-4xl text-yellow-500\">{points} Points!</span>\r\n        </div>\r\n        <p>Your content will be available in the marketplace soon.</p>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={onClose} color=\"primary\">\r\n          Close\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default SuccessDialog;\r\n","import React from 'react';\r\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\r\n\r\nfunction UploadButton({ label, onChange, fileName, accept, required }) {\r\n  return (\r\n    <div>\r\n      {label && <label className=\"block text-gray-700 text-sm font-bold mb-2\">{label}</label>}\r\n      <label className={`w-full flex items-center px-4 py-2 rounded-lg shadow-lg tracking-wide uppercase border cursor-pointer hover:bg-yellow-500 hover:text-white ${fileName ? 'bg-yellow-500 text-white' : 'bg-white text-yellow-500 border-yellow-500'}`}>\r\n        <CloudUploadIcon className=\"mr-2\" />\r\n        {fileName || 'Choose File'}\r\n        <input\r\n          type=\"file\"\r\n          onChange={onChange}\r\n          className=\"hidden\"\r\n          accept={accept}\r\n          required={required}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UploadButton;\r\n"],"names":["DWrite","_auth$currentUser","isSuccessDialogOpen","setIsSuccessDialogOpen","useState","useEffect","handlePageUnload","window","addEventListener","removeEventListener","title","setTitle","description","setDescription","content","setContent","coverImage","setCoverImage","selectedCoverFileName","setSelectedCoverFileName","dialogOpen","setDialogOpen","categories","setCategories","coverPreviewUrl","setCoverPreviewUrl","thumbnail","setThumbnail","isImageDimensionsValid","file","Promise","resolve","img","Image","onload","width","height","src","URL","createObjectURL","firebaseId","getAuth","currentUser","uid","_jsxs","className","children","_jsx","Typography","variant","onSubmit","async","e","preventDefault","length","Swal","text","allowEscapeKey","allowOutsideClick","showConfirmButton","onBeforeOpen","thumbnailUrl","thumbnailBlob","resizeImage","uploadToAzure","error","console","formData","FormData","append","join","response","fetch","concat","method","body","responseBody","log","status","ok","Error","JSON","parse","message","htmlFor","type","id","value","onChange","target","required","Autocomplete","multiple","options","getOptionLabel","option","filterSelectedOptions","event","newValue","renderInput","params","TextField","label","placeholder","rows","UploadButton","files","isFileSizeWithinRange","name","fileName","accept","alt","SubmitButton","buttonText","SuccessDialog","isOpen","onClose","points","isThumbnail","arguments","undefined","sasToken","json","Date","now","blobURL","requestOptions","headers","split","pica","Pica","desiredWidth","reject","reader","FileReader","scaleFactor","desiredHeight","canvas","document","createElement","resize","then","result","toBlob","blob","catch","onerror","readAsDataURL","minSizeInMB","maxSizeInMB","sizeInMB","size","_ref","LottieAnimation","React","Dialog","open","DialogTitle","DialogContent","fallback","animationData","congs1Animation","style","maxWidth","DialogActions","Button","onClick","color","CloudUploadIcon"],"sourceRoot":""}